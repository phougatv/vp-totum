name: Build, Test, and Deploy TOTUM to Azure Container App

on:
  push:
    branches: [master]
  workflow_dispatch:

env:
  AZURE_CONTAINER_REGISTRY_NAME: totum-bgcxfhgaa4e4cghw
  AZURE_CONTAINER_REGISTRY: totum-bgcxfhgaa4e4cghw.azurecr.io
  IMAGE_NAME: totum-api
  CONTAINER_APP_NAME: totum-api
  RESOURCE_GROUP: my-rg
  CONTAINER_PORT: 8080

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Install dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release

    # - name: Test
    #   run: dotnet test --configuration Release --no-build --verbosity normal

    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Build Docker image
      run: |
        docker build -t ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest VP.Totum.Url

    # - name: Login to ACR
    #   run: |
    #     docker login ${{ env.AZURE_CONTAINER_REGISTRY_NAME }} --username ${{ secrets.AZURE_CLIENT_ID }} --password ${{ secrets.AZURE_CLIENT_SECRET }}

    - name: Login to ACR
      run: |
        echo ${{ secrets.AZURE_CLIENT_SECRET }} | docker login ${{ env.AZURE_CONTAINER_REGISTRY }} -u ${{ secrets.AZURE_CLIENT_ID }} --password-stdin

    - name: Push Docker image to Azure Container Registry
      run: |
        docker push ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest

    - name: Deploy to Azure Container App
      run: |
            az containerapp update \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            --cpu 0.5 \
            --memory 1.0Gi \
            --min-replicas 1 \
            --max-replicas 1 \
            --ingress external \
            --target-port ${{ env.CONTAINER_PORT }}
